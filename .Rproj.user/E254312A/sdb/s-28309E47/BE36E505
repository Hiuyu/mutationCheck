{
    "collab_server" : "",
    "contents" : "setwd(\"~/CloudStation/projects/1-NPC_genomics/11-decide_panel/redesign_20170617/\")\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(dtplyr)\nlibrary(ggplot2)\nlibrary(stringr)\n\n# load mskcc gene summary\nmskcc = fread(\"MSKCC_mutated_gene.txt\")\nmskcc1 = mskcc[Mutations > 5] # frequently mutated gene\n\n# load data\nGD = as.data.frame(fread(\"GD_all_check_bq10.txt\"))\nGD.ano = as.data.frame(fread(\"GD_all_check.hg19_multianno.txt\"))\nHKSG = as.data.frame(fread(\"HKSG_all_check_bq10.txt\"))\nHKSG.ano = as.data.frame(fread(\"HKSG_all_check.hg19_multianno.txt\"))\nALL = rbind(GD, HKSG)\nano = unique(rbind(GD.ano[,colnames(HKSG.ano)], HKSG.ano)) # HKSG have fewer columns than GD\n# add index\nALL = ALL %>% mutate(index=str_c(chr,\":\",pos,\"_\",ref,\">\",alt))\nano = ano %>% mutate(index=str_c(Chr,\":\",Start,\"_\",Ref,\">\",Alt))\n\n############## I. data processing steps (DPS) ########################\n## 1. recode population frequency to be numeric\n## get the population frequency colnames\npop.freq.col=colnames(ano)[sapply(colnames(ano),function(x){\n  grepl(\"ExAC\",x)|grepl(\"1000g\",x)|grepl(\"gnomAD\",x)\n})]\npop.freq.col=c(pop.freq.col,\"SYSUCC_CANCER_FREE_AF\",\"Kaviar_AF\",\"HRC_AF\",\"HRC_non1000G_AF\",\"esp6500siv2_all\")\n## find the max population frequency among 1000G and ExAC03 populations and in-house cancer-free samples\nmessage(\"finding max pop freq\")\nDPS.1 = as.data.frame(ano)\nfor(x in c(pop.freq.col,\"SYSUCC_CANCER_FREE_NC\")){\n  DPS.1[DPS.1[,x]==\".\",x]=\"0\"\n  DPS.1[,x]=as.numeric(DPS.1[,x])\n  DPS.1[is.na(DPS.1[,x]),x]=0\n}\nDPS.1 = within(DPS.1, {\n  max.pop.freq = apply(DPS.1[,pop.freq.col],1,function(x) max(x))\n})\nqc.ano = DPS.1 %>% filter(max.pop.freq < 0.01) %>%\n  filter(SYSUCC_CANCER_FREE_AF < 0.01 & SYSUCC_CANCER_FREE_NC < 5) %>%\n  filter(Func_refGene %in% c(\"splicing\",\"UTR3\",\"UTR5\",\"exonic\"))\n\n# variants passing germline QC\ninc.ano = qc.ano %>% select(Chr, Start, End, Ref, Alt, index, Func_refGene, Gene_refGene, GeneDetail_refGene, ExonicFunc_refGene, AAChange_refGene, Interpro_domain, max.pop.freq)\n\n# combine\nrownames(inc.ano) = inc.ano$index\nALL.filter = ALL %>% filter(!index %in% inc.ano$index)\nALL.inc = ALL %>% filter(index %in% inc.ano$index) %>% select(-chr,-pos,-ref,-alt,-gene)\nALL.inc = cbind(inc.ano[ALL.inc$index,], ALL.inc)\n\n# Wed Jun 21 01:01:03 2017 ------------------------------\n# summary of GD.inc\nN.total = c(\"WE\" = 475, \"HK\" =  51, \"SG\" = 56)   # total 475 WES, 51 HK PNAS, 56 SG NG\nALL.inc = as.data.table(ALL.inc)\nALL.inc = ALL.inc[, ':=' (\n  tumor.mutation.pass = tumor.AD >= 2,\n  normal.mutation.pass = normal.AD < 2 & normal.VAF <= 0.01,\n  site.pass = tumor.pass.reads / tumor.total.reads >= 0.8 & normal.pass.reads / normal.total.reads >= 0.8,\n  region = str_sub(sample, 1, 2) # decide dataset\n)]\n# write.table(ALL.inc, \"GD_HKSG_rawlist_beforeQC.txt\", sep = \"\\t\", col.names = TRUE, row.names = FALSE, quote = FALSE)\n\n## summary of each gene, in rawdata\ngene.summary.before = ALL.inc[, list(\n  n.mutations = .N, # mutations\n  n.samples = length(unique(sample)), # samples affected\n  n.noncoding = sum(Func_refGene!=\"exonic\"), # number of non-coding mutations (splicing, UTR)\n  n.silent = sum(ExonicFunc_refGene == \"synonymous SNV\"), # synonymous SNV\n  n.nonsilent = sum(!ExonicFunc_refGene %in% c(\"synonymous SNV\", \".\")), # nonsynonymous, stopgain/loss, unknown, indel\n  n.tumor = sum(tumor.mutation.pass), # mutations in tumor\n  pct.tumor = sum(tumor.mutation.pass) / .N, # percentage of confident mutations in tumor\n  n.normal = sum(!normal.mutation.pass), # mutaitons in normal(germline)\n  pct.normal = sum(!normal.mutation.pass) / .N, # percentage of confident mutations in normal\n  n.tumor.normal = sum(tumor.mutation.pass & (!normal.mutation.pass)), # both seen in tumor and matched normal,\n  n.multi.align = sum(!map.uniq) # multiple alignment.\n), Gene_refGene]\n\n## filter mutations\nsite.summary.before = ALL.inc[, list(\n  Gene_refGene = unique(Gene_refGene),\n  Func_refGene = unique(Func_refGene),\n  ExonicFunc_refGene = unique(ExonicFunc_refGene),\n  n.samples = length(unique(sample)), # samples affected\n  n.tumor = sum(tumor.mutation.pass), # mutations in tumor\n  pct.tumor = sum(tumor.mutation.pass) / .N, # percentage of confident mutations in tumor\n  median.pct.tumor.pass.reads = median(tumor.pass.reads / tumor.total.reads), # median of passed reads in tumor\n  n.normal = sum(!normal.mutation.pass), # mutaitons in normal(germline)\n  pct.normal = sum(!normal.mutation.pass) / .N, # percentage of confident mutations in normal\n  median.pct.normal.pass.reads = median(normal.pass.reads / normal.total.reads), # median of passed reads in normal\n  n.tumor.normal = sum(tumor.mutation.pass & (!normal.mutation.pass)), # both seen in tumor and matched normal,\n  uniq.align = unique(map.uniq) # multiple alignment.\n), by = index]\n# do filtering on germline possibility and multiple alignment\npass.site.index = site.summary.before[\n  uniq.align & pct.normal < 0.3 & median.pct.tumor.pass.reads >=0.8 & median.pct.normal.pass.reads >=0.8,\n  index]\n\n# add filter\nALL.inc[, ':=' (\n  all.pass = tumor.mutation.pass & normal.mutation.pass & site.pass & map.uniq\n)]\n\n## final pass QC set\nALL.inc.pass = ALL.inc[all.pass == TRUE & index %in% pass.site.index]\n\n## summary after QC\ngene.summary.after = ALL.inc.pass[, list(\n  is.mskcc = unique(Gene_refGene) %in% mskcc1$Gene, # is ths gene in mskcc recurrent gene list?\n  n.mutations = .N, # mutations\n  n.samples = length(unique(sample)), # samples affected\n  pct.samples = length(unique(sample)) / sum(N.total), \n  n.mutations.pass = sum(all.pass), # mutations passing QC\n  n.samples.pass = length(unique(sample[all.pass])),\n  pct.sample.pass = length(unique(sample[all.pass])) / sum(N.total),\n  pct.sample.pass.nonsilent = length(unique(sample[all.pass & (!ExonicFunc_refGene %in% c(\"synonymous SNV\", \".\", \"unknown\"))])) / sum(N.total) ,  # confident nonsilent mutated samples\n  n.noncoding = sum(Func_refGene!=\"exonic\"), # number of non-coding mutations (splicing, UTR)\n  n.silent = sum(ExonicFunc_refGene == \"synonymous SNV\"), # synonymous SNV\n  n.nonsilent = sum(!ExonicFunc_refGene %in% c(\"synonymous SNV\", \".\")), # nonsynonymous, stopgain/loss, unknown, indel\n  n.ns = sum(ExonicFunc_refGene %in% c(\"nonsynonymous SNV\",\"stopgain\",\"stoploss\")),\n  n.tumor = sum(tumor.mutation.pass), # mutations pass in tumor\n  pct.tumor = sum(tumor.mutation.pass) / .N, # percentage of confident mutations in tumor\n  median.tumor.DP = median(as.numeric(tumor.pass.reads)), # use as.numeric() to make sure the same type\n  median.tumor.VAF = median(tumor.VAF),\n  p90.tumor.VAF = quantile(tumor.VAF, 0.9),\n  max.tumor.VAF = quantile(tumor.VAF, 1),\n  median.normal.DP = median(as.numeric(normal.pass.reads)),\n  max.mutated.site = names(sort(table(index), decreasing = T))[1], # the highly frequently mutated site. \n  max.mutated.site.n = sort(table(index), decreasing = T)[1] # how many samples have this mutation\n), Gene_refGene ][\n  order(-pct.sample.pass.nonsilent)\n  ]\n\n# write.csv(gene.summary.after, \"gene.summary.afterQC.csv\")\n# write.table(ALL.inc.pass[order(index)], \"GD_HKSG_rawlist_afterQC_noFuncFilter.txt\", sep = \"\\t\", col.names = TRUE, row.names = FALSE, quote = FALSE)\n\nz = gene.summary.after[Gene_refGene%in%c(\"CYLD\",\"TRAF3\",\"NLRC5\",\"TP53\",\"NFKBIA\",\"KMT2C\",\"KMT2D\",\"MTOR\",\"ERBB4\",\"POLE\",\"SSPO\",\"PRSS3\",\"AQP7\",\"CFTR\")]\n\n# mskcc gene in GD\nzz = mskcc[Mutations > 10, Gene]\ngene.summary.after.mskcc = gene.summary.after[Gene_refGene%in%zz][order(-pct.samples)]\n\n\nsave(GD.inc.pass, mskcc,file=\"tmp.RData\")\n\n## convert to MAF format\nlibrary(maftools)\nwrite.table(GD.inc.pass %>% select(Chr=Chr,\n                                    Start=Start,\n                                    End=End,\n                                    Ref=Ref,\n                                    Alt=Alt,\n                                    Func.refGene=Func_refGene,   \n                                    Gene.refGene=Gene_refGene,\n                                    GeneDetail.refGene=GeneDetail_refGenen                                    ExonicFunc.refGene=ExonicFunc_refGene,\n                                    AAChange.refGene=AAChange_refGene,\n                                    sample,\n                                   tumor.) %>%\n              mutate(ExonicFunc.refGene = gsub(\"_\",\" \",ExonicFunc.refGene)),\n            \"df.mutation.txt\", sep=\"\\t\", col.names = TRUE, row.names=FALSE, quote = FALSE)\nmaf = annovarToMaf(\"df.mutation.txt\", Center = \"bei\", refBuild = \"hg19\", tsbCol = \"SAMPLE\", table = \"refGene\", MAFobj = FALSE)\n\n\n# Thu Jun 22 10:47:42 2017 ------------------------------\n\ng1 = \"\nCYLD\nTRAF3\nNLRC5\nTP53\nNFKBIA\nKMT2C\nKMT2D\nMTOR\nERBB4\nPOLE\nSSPO\nCFTR\nFANCA\nZFHX3\nTTN\nMUC4\nFBN3\nSYNE1\nHSPG2\n\"\ngi = read.table(text=g1, stringsAsFactors = FALSE)\n## plot VAF distribution\nggplot(ALL.inc.pass[Gene_refGene %in% gene.summary.after[pct.sample.pass.nonsilent >= 0.05 & median.tumor.DP >= 20 & median.tumor.VAF >= 0.1, Gene_refGene]], \n       aes(x = Gene_refGene, y = tumor.VAF)) + \n  geom_boxplot(outlier.color=\"white\") + geom_jitter(alpha=0.2, width=0.03) + geom_hline(yintercept = 0.1, lty=2, color=\"red\") + \n  coord_flip()\n\n\n## plot NS:S ratio plot \nlibrary(ggrepel)\nzz = gene.summary.after[,.(Gene_refGene, pct.sample.pass, ns_s=ifelse(n.nonsilent/n.silent==Inf,60, n.nonsilent/n.silent), median.tumor.VAF)]\n# [median.tumor.VAF>0.05 & pct.sample.pass>0.05]\nggplot(zz[pct.sample.pass*587>2], aes(x=pct.sample.pass,y=ns_s, size=median.tumor.VAF)) + geom_point(alpha=0.1) + geom_hline(yintercept = c(2,5),lty=2,color=c(\"cyan\",\"red\")) +\n  geom_vline(xintercept = c(0.05, 0.1),lty=2,color=c(\"cyan\",\"red\")) + \n  geom_text_repel(data=zz[Gene_refGene %in% gi[,1]], aes(label=Gene_refGene), size=3) + \n  geom_text_repel(data=zz[ns_s>=5 & pct.sample.pass>0.1], aes(label=Gene_refGene, color=\"blue\"), size=3)\n\n\n\n        ",
    "created" : 1498200768374.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1424265492",
    "id" : "BE36E505",
    "lastKnownWriteTime" : 1498114207,
    "last_content_update" : 1498209055660,
    "path" : "~/CloudStation/projects/1-NPC_genomics/11-decide_panel/redesign_20170617/20170619_reselect_panel_gene.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}