{
    "collab_server" : "",
    "contents" : "########################################################\n# 2017-06-09:\n#   select candidate gene for panel design\n# Author: Xiao-yu Zuo\n########################################################\n\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(dtplyr)\nlibrary(ggplot2)\nlibrary(stringr)\n# load genomic info package\nlibrary(GenomicFeatures)\nlibrary(TxDb.Hsapiens.UCSC.hg19.knownGene)\nlibrary(org.Hs.eg.db)\n\n#### import data\nsetwd(\"~/CloudStation/projects/1-NPC_genomics/11-decide_panel/\")\nrawdata = fread(\"npc_cosmic_mskcc_allCandidateGene_withfreq_20170609.txt\", sep=\"\\t\", header=TRUE)\nrawdata = rawdata %>% mutate(density = F_GD*475/len.cds)\nrawdata[F_GD>0.2|density>0.05,.(symbol,npc,cosmic,mskcc,len.cds,F_GD,density)][order(-F_GD)]\n# while list\nwhitelist = read.table(\"while-list.txt\",header=FALSE,sep=\"\\t\",stringsAsFactors=F)[,1]\n\n## make accession index table\ntxdb <- TxDb.Hsapiens.UCSC.hg19.knownGene #shorthand (for convenience)\ntxdb\naccession = select(txdb, keys = rawdata[,tx], columns=\"GENEID\", keytype=\"TXNAME\")\naccession$SYMBOL = rawdata[,symbol]\naccession = as.data.table(accession)\n\n###########################################\n# level 1 gene: npc + (cosmic|mskcc)  and \n# whitelist genes\n# should be kept at first\n###########################################\nlevel1 = rawdata[(npc & (cosmic | mskcc)) | (cosmic & mskcc), -c(\"pathway\")]\ngid = accession[TXNAME%in%level1[,tx],]\ng = gid[,GENEID]\nw = do.call(c,mget(whitelist, revmap(org.Hs.egSYMBOL))) # get gene id for whitelist symbols\nlevel1.geneid = unique(c(g,w))\nwrite.table(level1.geneid,\"mutation.level1.txt\",row.names=F,col.names = F,quote=F)\n\n###########################################\n# level 2 gene: non-npc and (cosmic|mskcc) \n# consider frequency and expression in NPC\n###########################################\n## prepare RNA-seq data\nload(\"../4-RNAseq/RNAseq.expr.deseq.20161103_recode20170401.RData\")\nexpr = RNAseq.expr.deseq.20161103; rm(RNAseq.expr.deseq.20161103)\nexpr$grp = grepl(\"W[A-Z]S\",rownames(expr))\nexpr$grp = c(\"normal\",\"tumor\")[expr$grp+1]\nexpr = as.data.table(expr)\n## level 2\nlv2 = rawdata[(!npc) & (cosmic | mskcc), -c(\"pathway\")]\n## get expression data\nsubexpr = expr[,c(lv2$symbol,\"grp\"),with=FALSE]\n## decide which genes fail expression filter\nqe = subexpr[,lapply(.SD,quantile,probs=c(0,0.1,0.5,0.9,1)),by=grp] # compute quantiles\nqe = qe[,-c(\"grp\")]\n# not expr\nepiu = 30\nepil = 10\nf1 = (qe[4] < epil & qe[8] < epil) | (qe[5] < epiu & qe[10] < epiu)\nf1 = as.vector(!f1) # express\ng1 = colnames(qe)[f1]\n# mutation rate in NPC\nf2 = lv2[,(F_GD > 0.01 & level == \"High\") | (F_GD > 0.03 & level!=\"High\")]\ng2 = lv2[f2,symbol]\n# combine\nlevel2 = lv2[symbol %in% intersect(g1, g2)]\n# get gene id\ngid = accession[TXNAME%in%level2[,tx],]\nlevel2.geneid = gid[!GENEID %in% level1.geneid, GENEID]\nwrite.table(level2.geneid,\"mutation.level2.txt\",row.names=F,col.names = F,quote=F)\n\n\n###########################################\n# level 3 gene: npc only genes\n# consider frequency and expression in NPC\n###########################################\n## level 2\nlv3 = rawdata[npc & !(cosmic | mskcc), -c(\"pathway\")]\n## get expression data\nv = colnames(expr)[colnames(expr)%in%lv3[,symbol]]\nlv3 = lv3[symbol %in% v]\nsubexpr = expr[,c(v,\"grp\"),with=FALSE]\n## decide which genes fail expression filter\nqe = subexpr[,lapply(.SD,quantile,probs=c(0,0.1,0.5,0.9,1)),by=grp] # compute quantiles\nqe = qe[,-c(\"grp\")]\n# not expr\nepiu = 30\nepil = 10\nf1 = (qe[4] < epil & qe[8] < epil) | (qe[5] < epiu & qe[10] < epiu)\nf1 = as.vector(!f1)\ng1 = colnames(qe)[f1]\n# mutation rate in NPC\nf2 = lv3[,(F_GD > 0.03 & level == \"High\") | (F_GD > 0.08 & level != \"High\")]\ng2 = lv3[f2,symbol]\n# combine\nlevel3 = lv3[symbol %in% intersect(g1, g2)]\n# get gene id\ngid = accession[TXNAME%in%level3[,tx],]\nlevel3.geneid = gid[!GENEID %in% c(level1.geneid,level2.geneid), GENEID]\nwrite.table(level3.geneid,\"mutation.level3.txt\",row.names=F,col.names = F,quote=F)\n\n###########################################\n# combine all levels\n###########################################\ncomb.geneid = c(level1.geneid, level2.geneid, level3.geneid)\ncomb.gid = accession[GENEID %in% comb.geneid]\ncomb.gid = comb.gid[!grep(\"MUC\\\\d+\",SYMBOL)][SYMBOL!=\"TTN\"]\nwrite.csv(rawdata[tx %in% comb.gid$TXNAME], \"full_table.mutation.combine.v1.csv\")\nwrite.csv(rawdata[!tx %in% comb.gid$TXNAME], \"filtered.full_table.mutation.combine.v1.csv\")\nwrite.table(comb.gid[,GENEID],\"include.mutation.combine.v1.txt\",row.names=F,col.names = F,quote=F)\n\n# # cds length\n# ggplot(rawdata %>% mutate(FF=cut(F_GD,breaks = c(0,0.1,0.3,1)),CM=cosmic|mskcc),aes(len.cds,color=FF))+geom_density()+facet_grid(CM~.)\n# # density\n# ggplot(rawdata,aes(x=(cosmic|mskcc),y=density,fill=npc))+geom_boxplot()\n# \n# \n# \n# gene.mutation = unique(c(include.gene[,symbol],whitelist))\n# \n# #write.table(data.frame(final.list),\"final.in.txt\",col.names=F,row.names=F,quote=F)\n\n######### fusion  gene:\nfusion = fread(\"cosmic_v80_fusion.txt\")\n# find fusion hub gene\nfg.count = sort(table(fusion[,c(gene1,gene2)]), decreasing = TRUE)\nfg.count = fg.count[fg.count>5]\n# find high frequency fusion gene\nfusion.hf = fusion[1:10]\n# summarize fusion event count\ntotal_count = t(sapply(unique(fusion[,c(gene1,gene2)]),function(x){fusion[str_detect(pair,x),list(symbol=x,sum=sum(count),n=.N)]}))\ntotal_count = as.data.table(total_count)\n# combine fusion list\nfusion.level1 = c(\"BRAF\",\"RET\",\"BCR\",\"EWSR1\",\"NTRK3\",\"ABL1\",\"TMPRSS2\",\"CCDC6\",\"EML4\")\n# evaluate fusion gene\ngid = do.call(c,mget(fusion.level1, revmap(org.Hs.egSYMBOL))) # get gene id from gene symbol\nidg = names(gid)\nnames(idg) = gid\ngr = genes(txdb, columns=c(\"gene_id\"), filter=list(gene_id=gid)) # gene gene range from a set of gene id\ngr$symbol = idg[gr$gene_id] # add symbol column\ngr$width.mb = width(gr)/10^6\ngr\nsum(gr$width.mb)\nwrite.table(gr,\"fusion.txt\",row.names = F, col.names = F, quote = F)\n\n\n\n\ngene.exon = gene.mutation[!gene.mutation %in% gene.fusion]\ngene.full = gene.fusion\n\n\n\nutr3 = threeUTRsByTranscript(txdb, use.names=TRUE)\nutr5 = fiveUTRsByTranscript(txdb, use.names=TRUE)\nexons = exons(txdb, columns=c(\"TXNAME\"),filter=list(tx_name=include.gene[,tx]))\n\n\n\n\ntx2eg = select(txdb, keys = include.gene[,tx], columns=\"GENEID\", keytype=\"TXNAME\")\n\n\n",
    "created" : 1498186876894.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "477352864",
    "id" : "2446E9F5",
    "lastKnownWriteTime" : 1497349297,
    "last_content_update" : 1498188072398,
    "path" : "~/CloudStation/projects/1-NPC_genomics/11-decide_panel/20170609_panel_gene_selection.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}